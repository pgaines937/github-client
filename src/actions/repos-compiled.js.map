{"version":3,"sources":["repos.js"],"names":[],"mappings":"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","file":"repos-compiled.js","sourcesContent":["import { callApi } from \"../utils/apiUtils\";\r\n\r\nexport const SET_REPOS_QUERY = \"SET_REPOS_QUERY\";\r\nexport const SET_REPOS_SORT = \"SET_REPOS_SORT\";\r\nexport const SET_REPOS_ORDER = \"SET_REPOS_ORDER\";\r\nexport const SELECT_REPOS_PAGE = \"SELECT_REPOS_PAGE\";\r\nexport const INVALIDATE_REPOS_PAGE = \"INVALIDATE_REPOS_PAGE\";\r\n\r\nexport const REPOS_REQUEST = \"REPOS_REQUEST\";\r\nexport const REPOS_SUCCESS = \"REPOS_SUCCESS\";\r\nexport const REPOS_FAILURE = \"REPOS_FAILURE\";\r\n\r\nexport function reposQuery(query) {\r\n  return {\r\n    type: SET_REPOS_QUERY,\r\n    query\r\n  };\r\n}\r\n\r\nexport function reposSort(sort) {\r\n  return {\r\n    type: SET_REPOS_SORT,\r\n    sort\r\n  };\r\n}\r\n\r\nexport function reposOrder(order) {\r\n  return {\r\n    type: SET_REPOS_ORDER,\r\n    order\r\n  };\r\n}\r\n\r\nexport function selectReposPage(page) {\r\n  return {\r\n    type: SELECT_REPOS_PAGE,\r\n    page\r\n  };\r\n}\r\n\r\nexport function invalidateReposPage(page) {\r\n  return {\r\n    type: INVALIDATE_REPOS_PAGE,\r\n    page\r\n  };\r\n}\r\n\r\nfunction reposRequest(page) {\r\n  return {\r\n    type: REPOS_REQUEST,\r\n    page\r\n  };\r\n}\r\n\r\n// This is a curried function that takes page as argument,\r\n// and expects payload as argument to be passed upon API call success.\r\nfunction reposSuccess(page) {\r\n  return function(payload) {\r\n    return {\r\n      type: REPOS_SUCCESS,\r\n      page,\r\n      repos: payload.items,\r\n      totalCount: payload.total_count\r\n    };\r\n  };\r\n}\r\n\r\n// This is a curried function that takes page as argument,\r\n// and expects error as argument to be passed upon API call failure.\r\nfunction reposFailure(page) {\r\n  return function(error) {\r\n    return {\r\n      type: REPOS_FAILURE,\r\n      page,\r\n      error\r\n    };\r\n  };\r\n}\r\n\r\nconst API_ROOT = \"https://api.github.com\";\r\n\r\nfunction fetchRepos(page, query = \"stars:>10000\", sort = \"stars\", order = \"desc\") {\r\n  const url = `${API_ROOT}/search/repositories?q=${query}&sort=${sort}&order=${order}&page=${page}`;\r\n  return callApi(\r\n    url,\r\n    null,\r\n    reposRequest(page),\r\n    reposSuccess(page),\r\n    reposFailure(page)\r\n  );\r\n}\r\n\r\nfunction shouldFetchRepos(state, page) {\r\n  // Check cache first\r\n  const repos = state.reposByPage[page];\r\n  if (!repos) {\r\n    // Not cached, should fetch\r\n    return true;\r\n  }\r\n\r\n  if (repos.isFetching) {\r\n    // Shouldn't fetch since fetching is running\r\n    return false;\r\n  }\r\n\r\n  // Should fetch if cache was invalidate\r\n  return repos.didInvalidate;\r\n}\r\n\r\nexport function fetchReposIfNeeded(page, query, sort) {\r\n  return (dispatch, getState) => {\r\n    if (shouldFetchRepos(getState(), page)) {\r\n      return dispatch(fetchRepos(page, query, sort));\r\n    }\r\n  };\r\n}\r\n\r\nexport function fetchReposNow(page, query, sort) {\r\n  return (dispatch) => {\r\n      return dispatch(fetchRepos(page, query, sort));\r\n  };\r\n}\r\n\r\nexport function setReposSearchTerms(query = \"stars:>10000\", sort, order = \"desc\") {\r\n  return (dispatch) => {\r\n    let sortOut = \"stars\";\r\n    let orderOut = \"desc\";\r\n    if (sort === \"most-stars\") {\r\n      sortOut = \"stars\";\r\n      orderOut = \"desc\";\r\n    } else if (sort === \"fewest-stars\") {\r\n      sortOut = \"stars\";\r\n      orderOut = \"asc\";\r\n    } else if (sort === \"most-forks\") {\r\n      sortOut = \"forks\";\r\n      orderOut = \"desc\";\r\n    } else if (sort === \"fewest-forks\") {\r\n      sortOut = \"forks\";\r\n      orderOut = \"asc\";\r\n    } else if (sort === \"recently-updated\") {\r\n      sortOut = \"updated\";\r\n      orderOut = \"desc\";\r\n    } else if (sort === \"least-recently-updated\") {\r\n      sortOut = \"updated\";\r\n      orderOut = \"asc\";\r\n    }\r\n    reposQuery(query)\r\n    reposSort(sortOut)\r\n    reposOrder(orderOut)\r\n  }\r\n}\r\n"]}